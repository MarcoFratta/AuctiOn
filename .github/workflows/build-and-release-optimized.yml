name: Build and Release (Optimized)

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  # Build frontend only when frontend or common changes
  build-frontend:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      contains(github.event.head_commit.modified, 'packages/frontend/') ||
      contains(github.event.head_commit.modified, 'packages/common/') ||
      contains(github.event.head_commit.added, 'packages/frontend/') ||
      contains(github.event.head_commit.added, 'packages/common/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-fund --no-audit

      - name: Build frontend
        run: npm run build:frontend
        env:
          NODE_ENV: production

      - name: Package frontend
        run: |
          mkdir -p artifacts
          cd packages/frontend
          zip -r ../../artifacts/frontend.zip dist

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend
          path: artifacts/frontend.zip

  # Build backend services only when backend or common changes
  build-backend:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      contains(github.event.head_commit.modified, 'packages/auth-service/') ||
      contains(github.event.head_commit.modified, 'packages/lobby-service/') ||
      contains(github.event.head_commit.modified, 'packages/user-service/') ||
      contains(github.event.head_commit.modified, 'packages/auction-service/') ||
      contains(github.event.head_commit.modified, 'packages/api-gateway/') ||
      contains(github.event.head_commit.modified, 'packages/common/') ||
      contains(github.event.head_commit.added, 'packages/auth-service/') ||
      contains(github.event.head_commit.added, 'packages/lobby-service/') ||
      contains(github.event.head_commit.added, 'packages/user-service/') ||
      contains(github.event.head_commit.added, 'packages/auction-service/') ||
      contains(github.event.head_commit.added, 'packages/api-gateway/') ||
      contains(github.event.head_commit.added, 'packages/common/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-fund --no-audit

      - name: Build common package
        run: npm run build-common

      - name: Build all services
        run: npm run build:services
        env:
          NODE_ENV: production

      - name: Run backend tests
        run: |
          npm run test:auth-service
          npm run test:lobby-service
          npm run test:user-service
          npm run test:auction-service
          npm run test:api-gateway

      - name: Package backend services
        run: |
          mkdir -p artifacts/services
          cp -r packages/auth-service/dist artifacts/services/auth-service
          cp -r packages/lobby-service/dist artifacts/services/lobby-service
          cp -r packages/user-service/dist artifacts/services/user-service
          cp -r packages/auction-service/dist artifacts/services/auction-service
          cp -r packages/api-gateway/dist artifacts/services/api-gateway
          
          # Include the common package in the artifacts
          mkdir -p artifacts/services/common
          cp -r packages/common/dist artifacts/services/common
          cp packages/common/package.json artifacts/services/common/
          
          # Create the archive
          cd artifacts
          zip -r auction-services.zip services

      - name: Upload backend services artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-services
          path: artifacts/auction-services.zip

  # Build docs only when docs change
  build-docs:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      contains(github.event.head_commit.modified, 'packages/docs/') ||
      contains(github.event.head_commit.added, 'packages/docs/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-fund --no-audit

      - name: Build docs
        run: cd packages/docs && npm run docs:build

      - name: Package docs
        run: |
          mkdir -p artifacts
          cd packages/docs
          zip -r ../../artifacts/docs.zip docs/.vitepress/dist

      - name: Upload docs artifact
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: artifacts/docs.zip

  release:
    needs: [ build-frontend, build-backend, build-docs ]
    if: |
      always() && 
      (needs.build-frontend.result == 'success' || needs.build-frontend.result == 'skipped') &&
      (needs.build-backend.result == 'success' || needs.build-backend.result == 'skipped') &&
      (needs.build-docs.result == 'success' || needs.build-docs.result == 'skipped') &&
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Download all artifacts (only those that were built)
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Move artifacts to root
        run: |
          [ -f artifacts/frontend/frontend.zip ] && mv artifacts/frontend/frontend.zip . || echo "No frontend artifact"
          [ -f artifacts/docs/docs.zip ] && mv artifacts/docs/docs.zip . || echo "No docs artifact"
          [ -f artifacts/backend-services/auction-services.zip ] && mv artifacts/backend-services/auction-services.zip . || echo "No backend artifact"

      # Use semantic-release to create a release
      - name: Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release 