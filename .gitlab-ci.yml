image: node:18

stages:
  - install
  - build
  - test
# - deploy # Add deployment stages later if needed

# Cache node_modules to speed up subsequent runs
cache:
  key:
    files:
      - package-lock.json # Or yarn.lock / pnpm-lock.yaml
  paths:
    - node_modules/
# --- Global Scripts ---

# Install dependencies once before any jobs run in the 'install' stage
install_dependencies:
  stage: install
  script:
    - echo "Installing dependencies..."
    # Use 'npm ci' for faster, reliable installs based on lock file
    # Use '--ignore-scripts' if you have problematic postinstall scripts during CI
    - npm ci
  artifacts:
    paths: [ node_modules/ ]
    expire_in: 1 hour # Short expiry as cache is primary

# --- Building ---

# Define build jobs explicitly for services and frontend
build:common:
  stage: build
  needs: [ install_dependencies ]
  script:
    - echo "Building common package..."
    - npm run build --workspace=common
  artifacts:
    paths:
      - packages/common/dist # Adjust based on your build output
    expire_in: 1 week
  rules:
    - changes:
        - packages/common/**/*
    # Optional: Always build common on main branch pushes or tags
    # - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG'

build:auth-service:
  stage: build
  needs: [ install_dependencies, build:common ]
  script:
    - echo "Building packages/auth-service..."
    - npm run build --workspace=auth-service
  artifacts:
    paths:
      - packages/auth-service/dist
    expire_in: 1 week
  rules:
    - changes:
        - packages/auth-service/**/*
        - packages/common/**/* # Rebuild if common changes

build:lobby-service:
  stage: build
  needs: [ install_dependencies, build:common ]
  script:
    - echo "Building packages/lobby-service..."
    - npm run build --workspace=lobby-service
  artifacts:
    paths:
      - packages/lobby-service/dist
    expire_in: 1 week
  rules:
    - changes:
        - packages/lobby-service/**/*
        - packages/common/**/*

build:user-service:
  stage: build
  needs: [ install_dependencies, build:common ]
  script:
    - echo "Building packages/user-service..."
    - npm run build --workspace=user-service
  artifacts:
    paths:
      - packages/user-service/dist
    expire_in: 1 week
  rules:
    - changes:
        - packages/user-service/**/*
        - packages/common/**/*

build:auction-service:
  stage: build
  needs: [ install_dependencies, build:common ]
  script:
    - echo "Building packages/auction-service..."
    - npm run build --workspace=auction-service
  artifacts:
    paths:
      - packages/auction-service/dist
    expire_in: 1 week
  rules:
    - changes:
        - packages/auction-service/**/*
        - packages/common/**/*

build:api-gateway:
  stage: build
  needs: [ install_dependencies, build:common ]
  script:
    - echo "Building packages/api-gateway..."
    - npm run build --workspace=api-gateway
  artifacts:
    paths:
      - packages/api-gateway/dist
    expire_in: 1 week
  rules:
    - changes:
        - packages/api-gateway/**/*
        - packages/common/**/*

build:frontend:
  stage: build
  needs: [ install_dependencies, build:common ]
  script:
    - echo "Building packages/frontend..."
    - npm run build --workspace=frontend
  artifacts:
    paths:
      - packages/frontend/dist # Verify this is the correct output dir for frontend
    expire_in: 1 week
  rules:
    - changes:
        - packages/frontend/**/*
        - packages/common/**/* # Rebuild frontend if common changes

build:docs:
  stage: build
  needs: [ install_dependencies, build:common ]
  script:
    # Assuming the build script is correctly named in packages/docs/package.json
    - echo "Building packages/docs..."
    - npm run build --workspace=docs
  artifacts:
    paths:
      # Adjust path based on VitePress output
      - packages/docs/.vitepress/dist
    expire_in: 1 week
  rules:
    - changes:
        - packages/docs/**/*

# --- Testing ---

# Template for running tests in a specific workspace using root npm script
# Remove this template or make it very basic if jobs have vastly different needs
# .test_template: &test_definition
#   stage: test
#   needs: [ install_dependencies ]
#   script:
#     - echo "Running tests for $CI_JOB_NAME..."
#     - npm run $CI_JOB_NAME
#   variables:
#     PACKAGE_PATH: packages/$PACKAGE_NAME

# Define test jobs for each service based on package.json scripts
test:auth-service:
  stage: test
  image: node:18 # Assuming auth tests don't need Docker
  needs: [ install_dependencies, build:common ]
  script:
    - echo "Running tests for test:auth-service..."
    - npm run test:auth-service
  variables:
    PACKAGE_NAME: auth-service
  rules:
    - changes:
        - packages/auth-service/**/*
        - packages/common/**/*

test:lobby-service:
  stage: test
  image: docker:latest
  needs: [ install_dependencies, build:common ]
  services:
    - docker:dind # This is required for Docker-in-Docker
  before_script:
    - apk add --update nodejs npm git # Assuming lobby tests don't need Docker
  script:
    - echo "Running tests for test:lobby-service..."
    - npm run test:lobby-service
  variables:
    PACKAGE_NAME: lobby-service
  rules:
    - changes:
        - packages/lobby-service/**/*
        - packages/common/**/*

test:user-service:
  stage: test
  image: node:18 # Assuming user tests don't need Docker
  needs: [ install_dependencies, build:common ]
  script:
    - echo "Running tests for test:user-service..."
    - npm run test:user-service
  variables:
    PACKAGE_NAME: user-service
  rules:
    - changes:
        - packages/user-service/**/*
        - packages/common/**/*

test:auction-service:
  stage: test
  needs: [ install_dependencies, build:common ]
  image: docker:latest
  services:
    - docker:dind # This is required for Docker-in-Docker
  before_script:
    - apk add --update nodejs npm git
  script:
    - echo "Running tests for auction-serviceâ€¦"
    - npm run test --workspace=auction-service
  rules:
    - changes:
        - packages/auction-service/**/*
        - packages/common/**/*

        # required so the runner will allow dind

test:api-gateway:
  stage: test
  image: node:18
  needs: [ install_dependencies, build:common ]
  script:
    - echo "Running tests for test:api-gateway..."
    - npm run test:api-gateway
  variables:
    PACKAGE_NAME: api-gateway
  rules:
    - changes:
        - packages/api-gateway/**/*
        - packages/common/**/*

# Note: test:common and test:frontend have "echo" scripts, so no CI jobs needed unless tests are added.

# Job for Integration (E2E) tests
test:integration-tests: # Matches the script name in package.json
  stage: test
  image: docker:latest
  services:
    - docker:dind # This is required for Docker-in-Docker

  needs:
    - install_dependencies
    - build:common
    - build:auth-service
    - build:lobby-service
    - build:user-service
    - build:auction-service
    - build:api-gateway
  before_script:
    - apk add --update nodejs npm git
  script:
    - echo "Running integration tests..."
    - npm run test:integration-tests
  rules:
    # Run when integration tests change OR when any backend service or common code changes
    - changes:
        - packages/integration-tests/**/*
        - packages/auth-service/**/*
        - packages/lobby-service/**/*
        - packages/user-service/**/*
        - packages/auction-service/**/*
        - packages/api-gateway/**/*
        - packages/common/**/*

# --- Deployment (Placeholder) ---
# Add deployment jobs here, potentially triggered only on the main branch or tags
# deploy:production:
#   stage: deploy
#   script:
#     - echo "Deploying to production..."
#     # Add your deployment commands here
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "main"' # Or your default branch name
#   needs:
#     - build:auth-service # Depend on necessary build jobs
#     - build:frontend 